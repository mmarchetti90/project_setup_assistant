#!/usr/bin/env python3"""This script integrates RNASeq and ATACSeq data and outputs a summary table as well as a scatterplot of log2FC and significance.Note that ATACSeq data has to be filtered (i.e. remove genes with unclear opennes and merge genes multiple concordant regions mapping to the same gene)."""### ---------------------------------------- ###def merge_data(rna_data, atac_data):        all_data = pd.merge(rna_data, atac_data, on=['gene_id', 'gene_symbol', 'biotype', 'chromosome'], how='outer', suffixes=['_rna', '_atac'])        # Fill NAs in log2FC columns with 0    for col in ['log2FoldChange_rna', 'log2FoldChange_atac']:                all_data.loc[all_data[col].isna(), col] = 1        # Fill NAs in pvalue columns with 1    for col in ['pvalue_rna', 'padj_rna', 'pvalue_atac', 'padj_atac']:                all_data.loc[all_data[col].isna(), col] = 1        ### Find genes in common or not with or without the same behaviors        # Get number of significant genes    rna_p_thr = 0.05    atac_p_thr = 0.01    significance_num = {'Concordant' : ((((all_data.log2FoldChange_rna > 0) & (all_data.log2FoldChange_atac > 0)) |                                         ((all_data.log2FoldChange_rna < 0) & (all_data.log2FoldChange_atac < 0))) &                                        (all_data.padj_rna < rna_p_thr) &                                        (all_data.padj_atac < atac_p_thr)).sum(),                        'Discordant' : ((((all_data.log2FoldChange_rna > 0) & (all_data.log2FoldChange_atac < 0)) |                                         ((all_data.log2FoldChange_rna < 0) & (all_data.log2FoldChange_atac > 0))) &                                        (all_data.padj_rna < rna_p_thr) &                                        (all_data.padj_atac < atac_p_thr)).sum(),                        'RNA Only' : ((all_data.padj_rna < rna_p_thr) &                                      (all_data.padj_atac >= atac_p_thr)).sum(),                        'ATAC Only' : ((all_data.padj_rna >= rna_p_thr) &                                       (all_data.padj_atac < atac_p_thr)).sum(),                        'NS' : ((all_data.padj_rna >= rna_p_thr) &                                (all_data.padj_atac >= atac_p_thr)).sum()}        # Create column for significance    significance = ['Concordant' if p_rna < rna_p_thr and p_atac < atac_p_thr and ((fc_rna > 0 and fc_atac > 0) or (fc_rna < 0 and fc_atac < 0))                    else 'Discordant' if p_rna < rna_p_thr and p_atac < atac_p_thr and ((fc_rna > 0 and fc_atac < 0) or (fc_rna < 0 and fc_atac > 0))                    else 'RNA Only' if p_rna < rna_p_thr and p_atac >= atac_p_thr                    else 'ATAC Only' if p_rna >= rna_p_thr and p_atac < atac_p_thr                    else 'NS'                    for _,(fc_rna, fc_atac, p_rna, p_atac) in all_data.loc[:, ['log2FoldChange_rna', 'log2FoldChange_atac', 'padj_rna', 'padj_atac']].iterrows()]    all_data = all_data.assign(Significance = significance)        return all_data, significance_num### ---------------------------------------- ###def overlap_significance(sig_num):        tot_genes = 21885 # Protein coding genes, M in hypergeom    differentially_expressed = sum([sig_num[x] for x in ['Concordant', 'Discordant', 'RNA Only']]) # N in hypergeom    differentially_opened = sum([sig_num[x] for x in ['Concordant', 'Discordant', 'ATAC Only']]) # n in hypergeom    overlapping = sum([sig_num[x] for x in ['Concordant', 'Discordant']]) # k in hypergeom        p_overlap = hypergeom.sf(overlapping, tot_genes, differentially_opened, differentially_expressed, loc=0)        output_text = '\n'.join([f'Total protein coding genes\t{tot_genes}',                             f'Differentially expressed genes\t{differentially_expressed}',                             f'Differentially accessible genes\t{differentially_opened}',                             f'Overlapping genes\t{overlapping}',                             f'Overlap p value\t{p_overlap}'])        with open('merged_data_rna_and_atac_overlap.tsv', 'w') as output:                output.write(output_text)### ---------------------------------------- ###def correlate_datasets(all_data):        correls = {'category' : ['All'],               'r' : [pearsonr(all_data.loc[:, 'log2FoldChange_rna'], all_data.loc[:, 'log2FoldChange_atac'])[0]],               'pval' : [pearsonr(all_data.loc[:, 'log2FoldChange_rna'], all_data.loc[:, 'log2FoldChange_atac'])[1]]}        #for cat in ['Concordant', 'Discordant', 'RNA Only', 'ATAC Only', 'NS']:    for cat in ['Concordant', 'Discordant']:                r, pval = pearsonr(all_data.loc[all_data.Significance == cat, 'log2FoldChange_rna'], all_data.loc[all_data.Significance == cat, 'log2FoldChange_atac'])                correls['category'].append(cat)        correls['r'].append(r)        correls['pval'].append(pval)            correls = pd.DataFrame(correls)        return correls### ---------------------------------------- ###def plot_integration(all_dt):        # Modify significance column    for val in significance_num.keys():                all_dt.replace({'Significance' : val}, f'{val} ({significance_num[val]})', inplace=True)        # Define palette    palette = {f'Concordant ({significance_num["Concordant"]})' : 'orangered',               f'Discordant ({significance_num["Discordant"]})' : 'deepskyblue',               f'RNA Only ({significance_num["RNA Only"]})' : 'limegreen',               f'ATAC Only ({significance_num["ATAC Only"]})' : 'mediumorchid',               f'NS ({significance_num["NS"]})' : 'lightgray'}        # Remove genes with padj == 1 to make visualization more appealing (note that the number of 'NS' in Significant column will be correct)    all_dt = all_dt.loc[(all_dt.padj_rna < 1) & (all_dt.padj_atac < 1),]        # Sort so that 'NS' is plotted first and 'Both' last    custom_dict = {f'{val} ({significance_num[val]})' : n for n,val in enumerate(['NS', 'ATAC Only', 'RNA Only', 'Discordant', 'Concordant'])}    #all_dt.sort_values(by='Significance', key=lambda x: x.map(custom_dict), inplace=True)    all_dt = all_dt.loc[all_dt.Significance.map(custom_dict).index,]        # Plot    plt.figure(figsize=(5, 5))    ax = sns.scatterplot(data=all_dt,                         x='log2FoldChange_rna',                         y='log2FoldChange_atac',                         hue='Significance',                         hue_order=palette.keys(),                         palette=palette,                         s=10,                         edgecolor='black')    sns.move_legend(ax, "upper left", bbox_to_anchor=(1, 1), title='Significance')    plt.xlabel('RNA Log2FC', fontweight='bold')    plt.ylabel('ATAC Log2FC', fontweight='bold')    plt.savefig('merged_data_rna_and_atac.png', bbox_inches='tight', dpi=300)    plt.close()### ------------------MAIN------------------ ###import pandas as pdimport seaborn as snsfrom matplotlib import pyplot as pltfrom scipy.stats import hypergeom, pearsonrfrom sys import argv### Load datarna_file = argv[argv.index('--rna') + 1]rna_data = pd.read_csv(rna_file, sep='\t')rna_data = rna_data.loc[rna_data.biotype == 'protein_coding']rna_data.drop('original_id', axis=1, inplace=True)atac_file = argv[argv.index('--atac') + 1]atac_data = pd.read_csv(atac_file, sep='\t')atac_data = atac_data.loc[atac_data.biotype == 'protein_coding']atac_data.drop('original_id', axis=1, inplace=True)### Merge and fill NAsall_data, significance_num = merge_data(rna_data, atac_data)all_data.to_csv('merged_data_rna_and_atac.tsv', sep='\t', index=False, header=True)### Overlap significanceoverlap_significance(significance_num)### Pearson's correlationcorrels = correlate_datasets(all_data)correls.to_csv('merged_data_rna_and_atac_correlation.tsv', sep='\t', index=False, header=True)### Diagnostic plots of log2FCplot_integration(all_data.copy())