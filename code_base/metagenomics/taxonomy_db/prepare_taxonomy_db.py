#!/usr/bin/env python3"""This script parses taxonomy files from NCBI and generates a databaseN.B. Necessary files can be dowloaded as a zip from:https://ftp.ncbi.nih.gov/pub/taxonomy/taxdmp.zip"""### ---------------------------------------- ###### ------------------MAIN------------------ ###import ioimport pandas as pdimport requestsfrom zipfile import ZipFile### Download NCBI taxonomyfile_url = 'https://ftp.ncbi.nih.gov/pub/taxonomy/taxdmp.zip'extraction_dir = 'ncbi_taxdmp'response = requests.get(file_url, stream=True)if response.status_code == 200:        zip_stream = io.BytesIO(response.content)        with ZipFile(zip_stream, 'r') as zip_file:                zip_file.extractall(extraction_dir)        print(f'Data downloaded successfully to {extraction_dir}')else:    print(f'ERROR: request status code {response.status_code}')### Parse data to create a taxonomy database# taxid to nametarget_file = f'{extraction_dir}/names.dmp'taxid_to_name = {}with open(target_file) as names_raw:        for nr in names_raw:                if not len(nr):                        continue                taxid, name, *_ = nr.split('\t|\t')                taxid = int(taxid)                if taxid not in taxid_to_name.keys():                        taxid_to_name[taxid] = namewith open('taxid_to_name.tsv', 'w') as output:        output_text = '\n'.join([f'{taxid}\t{name}' for taxid,name in taxid_to_name.items()])        output.write(output_text)# Hierarchytarget_file = f'{extraction_dir}/nodes.dmp'taxid_to_rank = {}hierarchy = []with open(target_file) as hierarchy_raw:        for hr in hierarchy_raw:                if not len(hr):                        continue        taxid, parent_taxid, rank, *_ = hr.split('\t|\t')                taxid, parent_taxid = int(taxid), int(parent_taxid)                taxid_to_rank[taxid] = rank                hierarchy.append([parent_taxid, taxid])hierarchy = pd.DataFrame(hierarchy, columns=['parent', 'child'])hierarchy.to_csv('taxid_hierarchy.tsv', sep='\t', index=False, header=True)with open('taxid_to_rank.tsv', 'w') as output:        output_text = '\n'.join([f'{taxid}\t{rank}' for taxid,rank in taxid_to_rank.items()])        output.write(output_text)