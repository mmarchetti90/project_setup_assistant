#!/usr/bin/env python3"""This script plots Log R Ratio (LRR) and B Allele Frequency (LRR) data from cytological arrays for CNV detectionInput must be a tab-delimited file with the following columns:Chr    Chromosome identifierPosition    Variant position on the chromosome<sample_name>.B Allele Freq    B Allele Frequency for sample <sample_name><sample_name>.Log R Ratio    Log R Ratio for sample <sample_name>"""### ---------------------------------------- ###def plot_data(dt, vlines, xlabels, xmax, w=100000, prefix='CNV'):        # LRR trendline        dt['bin'] = dt['pos'].values // w    sparse_binned_lrr = dt.groupby('bin')['LRR'].mean()    full_binned_lrr = pd.Series({b : sparse_binned_lrr[b] if b in sparse_binned_lrr.index else                                 0                                 for b in range(xmax // w + 1)})    full_binned_lrr[[v // w for v in vlines]] = 0    full_binned_lrr = full_binned_lrr.reset_index(drop=False)    full_binned_lrr.columns = ['pos', 'LRR']    full_binned_lrr['pos'] *= w    full_binned_lrr.sort_values('pos', inplace=True)        # Set data limits        xmin, xmax = 0, xmax        baf_ymin, baf_ymax = 0, 1        lrr_ymin, lrr_ymax = -2.5, 2.5        dt.loc[dt['BAF'] < baf_ymin, 'BAF'] = baf_ymin    dt.loc[dt['BAF'] > baf_ymax, 'BAF'] = baf_ymax        dt.loc[dt['LRR'] < lrr_ymin, 'LRR'] = lrr_ymin    dt.loc[dt['LRR'] > lrr_ymax, 'LRR'] = lrr_ymax        # Plot        hue_order = list(xlabels.keys())        fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=False, figsize=(30, 8))        ax1.set_title(prefix)        sns.scatterplot(dt, x='pos', y='BAF', hue='contig', hue_order=hue_order, legend=False, palette='tab20', s=3, alpha=1, edgecolor=None, ax=ax1)        ax1.vlines(x=vlines, ymin=baf_ymin, ymax=baf_ymax, ls='dashed', lw=1, color='black')        sns.scatterplot(dt, x='pos', y='LRR', hue='contig', hue_order=hue_order, legend=False, palette='tab20', s=3, alpha=1, edgecolor=None, ax=ax2)        #ax2.vlines(x=vlines, ymin=dt['LRR'].min(), ymax=dt['LRR'].max(), ls='dashed', lw=1, color='black')    ax2.vlines(x=vlines, ymin=lrr_ymin, ymax=lrr_ymax, ls='dashed', lw=1, color='black')        ax2.hlines(0, xmin, xmax, ls='solid', lw=1, color='black')        ax2.plot(full_binned_lrr['pos'].values, full_binned_lrr['LRR'].values, lw=1, color='red')        ax2.set_xticks(ticks=list(xlabels.values()), labels=list(xlabels.keys()))        ax2.set_xlim(xmin, xmax)        ax2.set_ylim(lrr_ymin, lrr_ymax)        ax2.set_xlabel(None)        plt.tight_layout()        plt.savefig(f'{prefix}.png', dpi=300)        plt.close()### ------------------MAIN------------------ ###import pandas as pdimport seaborn as snsfrom matplotlib import pyplot as pltfrom sys import argv### Load BAF and LRR datadata_path = argv[argv.index('--data') + 1]data = pd.read_csv(data_path, sep='\t')data['Chr'] = data['Chr'].astype(str)data = data.loc[~ data['Chr'].isin(['MT', 'XY'])]data = data.sort_values(by=['Chr', 'Position'])data.reset_index(drop=True, inplace=True)### Load contig sizes data# N.B. Can be generated with ./utils/genomic_utils/get_contig_size.pycontig_size_path = argv[argv.index('--contig_sizes') + 1]contig_size = {line.split(',')[0].replace('##contig=<ID=', '') : int(line.split(',')[1].replace('length=', '').replace('>', ''))               for line in open(contig_size_path).read().split('\n')}contig_size = {key : val for key,val in contig_size.items() if key in data['Chr'].values}### Plot# Offset for contig plotting along Xx_offsets = {}for contig in [str(i) for i in range(1, 23, 1)] + ['X', 'Y']:        offset = sum([contig_size[c] for c in x_offsets.keys()])        x_offsets[contig] = offset    # Transform x positionsfor contig,offset in x_offsets.items():        data.loc[data['Chr'] == contig, 'Position'] += offset# Plottingsamples = [c.replace('.Log R Ratio', '') for c in data.columns if '.Log R Ratio' in c]for s in samples:    data_sub = data.loc[:, ['Chr', 'Position', f'{s}.B Allele Freq', f'{s}.Log R Ratio']].copy()    data_sub.columns = ['contig', 'pos', 'BAF', 'LRR']        vlines = list(x_offsets.values())        xlabels = {c : (contig_size[c] // 2) + x_offsets[c] for c in contig_size.keys()}        xmax = sum(contig_size.values())        plot_data(data_sub, vlines, xlabels, xmax, 1000000, s)